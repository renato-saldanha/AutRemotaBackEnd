"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _compiler = _interopRequireDefault(require("knex/lib/schema/compiler"));

var _lodash = require("lodash");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

// Schema Compiler
// -------
var SchemaCompiler_Firebird = /*#__PURE__*/function (_SchemaCompiler) {
  (0, _inherits2["default"])(SchemaCompiler_Firebird, _SchemaCompiler);

  var _super = _createSuper(SchemaCompiler_Firebird);

  function SchemaCompiler_Firebird() {
    (0, _classCallCheck2["default"])(this, SchemaCompiler_Firebird);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(SchemaCompiler_Firebird, [{
    key: "hasTable",
    value: function hasTable(tableName) {
      var fullTableName = this.formatter.wrap(prefixedTableName(this.schema, String(tableName))).toUpperCase();
      var sql = "select 1 as x from rdb$relations where rdb$relation_name = '".concat(fullTableName, "'");
      this.pushQuery({
        sql: sql,
        output: function output(raw) {
          var result = (0, _lodash.flatten)(raw).shift();

          if (!result || !(result instanceof Object)) {
            return;
          }

          return Number(result.x) === 1;
        }
      });
    } // Compile the query to determine if a column exists.

  }, {
    key: "hasColumn",
    value: function hasColumn(tableName, column) {
      this.pushQuery({
        sql: "select i.rdb$field_name as \"Field\" from " + "rdb$relations r join rdb$RELATION_FIELDS i " + "on (i.rdb$relation_name = r.rdb$relation_name) " + "where r.rdb$relation_name = '".concat(this.formatter.wrap(tableName.toUpperCase()), "'"),
        output: function output(resp) {
          var _this = this;

          return (0, _lodash.some)((0, _lodash.flatten)(resp), function (col) {
            return _this.client.wrapIdentifier(col.field.trim().toLowerCase()) === _this.client.wrapIdentifier(column.trim().toLowerCase());
          });
        }
      });
    }
  }, {
    key: "dropTableIfExists",
    value: function dropTableIfExists(tableName) {
      var fullTableName = this.formatter.wrap(prefixedTableName(this.schema, tableName)).toUpperCase();
      var dropTableSql = this.dropTablePrefix + fullTableName;
      this.pushQuery("\n      EXECUTE BLOCK AS BEGIN\n      if (exists(select 1 from rdb$relations where rdb$relation_name = '".concat(fullTableName, "')) then\n      execute statement '").concat(dropTableSql, "';\n      END\n    "));
      return this;
    }
  }, {
    key: "renameTable",
    value: function renameTable(tableName, to) {
      throw new Error("".concat(this.name, " is not implemented for this dialect (http://www.firebirdfaq.org/faq363/)."));
    }
  }]);
  return SchemaCompiler_Firebird;
}(_compiler["default"]);

function prefixedTableName(prefix, table) {
  return prefix ? "".concat(prefix, ".").concat(table) : table;
}

var _default = SchemaCompiler_Firebird;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY2hlbWEvY29tcGlsZXIuanMiXSwibmFtZXMiOlsiU2NoZW1hQ29tcGlsZXJfRmlyZWJpcmQiLCJ0YWJsZU5hbWUiLCJmdWxsVGFibGVOYW1lIiwiZm9ybWF0dGVyIiwid3JhcCIsInByZWZpeGVkVGFibGVOYW1lIiwic2NoZW1hIiwiU3RyaW5nIiwidG9VcHBlckNhc2UiLCJzcWwiLCJwdXNoUXVlcnkiLCJvdXRwdXQiLCJyYXciLCJyZXN1bHQiLCJzaGlmdCIsIk9iamVjdCIsIk51bWJlciIsIngiLCJjb2x1bW4iLCJyZXNwIiwiY29sIiwiY2xpZW50Iiwid3JhcElkZW50aWZpZXIiLCJmaWVsZCIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsImRyb3BUYWJsZVNxbCIsImRyb3BUYWJsZVByZWZpeCIsInRvIiwiRXJyb3IiLCJuYW1lIiwiU2NoZW1hQ29tcGlsZXIiLCJwcmVmaXgiLCJ0YWJsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOztBQUVBOzs7Ozs7QUFFQTtBQUNBO0lBQ01BLHVCOzs7Ozs7Ozs7Ozs7V0FDSixrQkFBU0MsU0FBVCxFQUFvQjtBQUNsQixVQUFNQyxhQUFhLEdBQUcsS0FBS0MsU0FBTCxDQUNuQkMsSUFEbUIsQ0FDZEMsaUJBQWlCLENBQUMsS0FBS0MsTUFBTixFQUFjQyxNQUFNLENBQUNOLFNBQUQsQ0FBcEIsQ0FESCxFQUVuQk8sV0FGbUIsRUFBdEI7QUFJQSxVQUFNQyxHQUFHLHlFQUFrRVAsYUFBbEUsTUFBVDtBQUNBLFdBQUtRLFNBQUwsQ0FBZTtBQUNiRCxRQUFBQSxHQUFHLEVBQUhBLEdBRGE7QUFFYkUsUUFBQUEsTUFBTSxFQUFFLGdCQUFDQyxHQUFELEVBQVM7QUFDZixjQUFNQyxNQUFNLEdBQUcscUJBQVFELEdBQVIsRUFBYUUsS0FBYixFQUFmOztBQUNBLGNBQUksQ0FBQ0QsTUFBRCxJQUFXLEVBQUVBLE1BQU0sWUFBWUUsTUFBcEIsQ0FBZixFQUE0QztBQUMxQztBQUNEOztBQUVELGlCQUFPQyxNQUFNLENBQUNILE1BQU0sQ0FBQ0ksQ0FBUixDQUFOLEtBQXFCLENBQTVCO0FBQ0Q7QUFUWSxPQUFmO0FBV0QsSyxDQUVEOzs7O1dBQ0EsbUJBQVVoQixTQUFWLEVBQXFCaUIsTUFBckIsRUFBNkI7QUFDM0IsV0FBS1IsU0FBTCxDQUFlO0FBQ2JELFFBQUFBLEdBQUcsRUFDRCwwTEFHZ0MsS0FBS04sU0FBTCxDQUFlQyxJQUFmLENBQzlCSCxTQUFTLENBQUNPLFdBQVYsRUFEOEIsQ0FIaEMsTUFGVztBQVFiRyxRQUFBQSxNQVJhLGtCQVFOUSxJQVJNLEVBUUE7QUFBQTs7QUFDWCxpQkFBTyxrQkFBSyxxQkFBUUEsSUFBUixDQUFMLEVBQW9CLFVBQUNDLEdBQUQsRUFBUztBQUNsQyxtQkFDRSxLQUFJLENBQUNDLE1BQUwsQ0FBWUMsY0FBWixDQUEyQkYsR0FBRyxDQUFDRyxLQUFKLENBQVVDLElBQVYsR0FBaUJDLFdBQWpCLEVBQTNCLE1BQ0EsS0FBSSxDQUFDSixNQUFMLENBQVlDLGNBQVosQ0FBMkJKLE1BQU0sQ0FBQ00sSUFBUCxHQUFjQyxXQUFkLEVBQTNCLENBRkY7QUFJRCxXQUxNLENBQVA7QUFNRDtBQWZZLE9BQWY7QUFpQkQ7OztXQUVELDJCQUFrQnhCLFNBQWxCLEVBQTZCO0FBQzNCLFVBQU1DLGFBQWEsR0FBRyxLQUFLQyxTQUFMLENBQ25CQyxJQURtQixDQUNkQyxpQkFBaUIsQ0FBQyxLQUFLQyxNQUFOLEVBQWNMLFNBQWQsQ0FESCxFQUVuQk8sV0FGbUIsRUFBdEI7QUFHQSxVQUFNa0IsWUFBWSxHQUFHLEtBQUtDLGVBQUwsR0FBdUJ6QixhQUE1QztBQUVBLFdBQUtRLFNBQUwsbUhBRXNFUixhQUZ0RSxnREFHdUJ3QixZQUh2QjtBQU9BLGFBQU8sSUFBUDtBQUNEOzs7V0FFRCxxQkFBWXpCLFNBQVosRUFBdUIyQixFQUF2QixFQUEyQjtBQUN6QixZQUFNLElBQUlDLEtBQUosV0FDRCxLQUFLQyxJQURKLGdGQUFOO0FBR0Q7OztFQTdEbUNDLG9COztBQWdFdEMsU0FBUzFCLGlCQUFULENBQTJCMkIsTUFBM0IsRUFBbUNDLEtBQW5DLEVBQTBDO0FBQ3hDLFNBQU9ELE1BQU0sYUFBTUEsTUFBTixjQUFnQkMsS0FBaEIsSUFBMEJBLEtBQXZDO0FBQ0Q7O2VBRWNqQyx1QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpcmViaXJkOiBDb2x1bW4gQnVpbGRlciAmIENvbXBpbGVyXG4vLyAtLS0tLS0tXG5pbXBvcnQgU2NoZW1hQ29tcGlsZXIgZnJvbSBcImtuZXgvbGliL3NjaGVtYS9jb21waWxlclwiO1xuXG5pbXBvcnQgeyBzb21lLCBmbGF0dGVuIH0gZnJvbSBcImxvZGFzaFwiO1xuXG4vLyBTY2hlbWEgQ29tcGlsZXJcbi8vIC0tLS0tLS1cbmNsYXNzIFNjaGVtYUNvbXBpbGVyX0ZpcmViaXJkIGV4dGVuZHMgU2NoZW1hQ29tcGlsZXIge1xuICBoYXNUYWJsZSh0YWJsZU5hbWUpIHtcbiAgICBjb25zdCBmdWxsVGFibGVOYW1lID0gdGhpcy5mb3JtYXR0ZXJcbiAgICAgIC53cmFwKHByZWZpeGVkVGFibGVOYW1lKHRoaXMuc2NoZW1hLCBTdHJpbmcodGFibGVOYW1lKSkpXG4gICAgICAudG9VcHBlckNhc2UoKTtcblxuICAgIGNvbnN0IHNxbCA9IGBzZWxlY3QgMSBhcyB4IGZyb20gcmRiJHJlbGF0aW9ucyB3aGVyZSByZGIkcmVsYXRpb25fbmFtZSA9ICcke2Z1bGxUYWJsZU5hbWV9J2A7XG4gICAgdGhpcy5wdXNoUXVlcnkoe1xuICAgICAgc3FsLFxuICAgICAgb3V0cHV0OiAocmF3KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGZsYXR0ZW4ocmF3KS5zaGlmdCgpO1xuICAgICAgICBpZiAoIXJlc3VsdCB8fCAhKHJlc3VsdCBpbnN0YW5jZW9mIE9iamVjdCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gTnVtYmVyKHJlc3VsdC54KSA9PT0gMTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICAvLyBDb21waWxlIHRoZSBxdWVyeSB0byBkZXRlcm1pbmUgaWYgYSBjb2x1bW4gZXhpc3RzLlxuICBoYXNDb2x1bW4odGFibGVOYW1lLCBjb2x1bW4pIHtcbiAgICB0aGlzLnB1c2hRdWVyeSh7XG4gICAgICBzcWw6XG4gICAgICAgIGBzZWxlY3QgaS5yZGIkZmllbGRfbmFtZSBhcyBcIkZpZWxkXCIgZnJvbSBgICtcbiAgICAgICAgYHJkYiRyZWxhdGlvbnMgciBqb2luIHJkYiRSRUxBVElPTl9GSUVMRFMgaSBgICtcbiAgICAgICAgYG9uIChpLnJkYiRyZWxhdGlvbl9uYW1lID0gci5yZGIkcmVsYXRpb25fbmFtZSkgYCArXG4gICAgICAgIGB3aGVyZSByLnJkYiRyZWxhdGlvbl9uYW1lID0gJyR7dGhpcy5mb3JtYXR0ZXIud3JhcChcbiAgICAgICAgICB0YWJsZU5hbWUudG9VcHBlckNhc2UoKVxuICAgICAgICApfSdgLFxuICAgICAgb3V0cHV0KHJlc3ApIHtcbiAgICAgICAgcmV0dXJuIHNvbWUoZmxhdHRlbihyZXNwKSwgKGNvbCkgPT4ge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLmNsaWVudC53cmFwSWRlbnRpZmllcihjb2wuZmllbGQudHJpbSgpLnRvTG93ZXJDYXNlKCkpID09PVxuICAgICAgICAgICAgdGhpcy5jbGllbnQud3JhcElkZW50aWZpZXIoY29sdW1uLnRyaW0oKS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGRyb3BUYWJsZUlmRXhpc3RzKHRhYmxlTmFtZSkge1xuICAgIGNvbnN0IGZ1bGxUYWJsZU5hbWUgPSB0aGlzLmZvcm1hdHRlclxuICAgICAgLndyYXAocHJlZml4ZWRUYWJsZU5hbWUodGhpcy5zY2hlbWEsIHRhYmxlTmFtZSkpXG4gICAgICAudG9VcHBlckNhc2UoKTtcbiAgICBjb25zdCBkcm9wVGFibGVTcWwgPSB0aGlzLmRyb3BUYWJsZVByZWZpeCArIGZ1bGxUYWJsZU5hbWU7XG5cbiAgICB0aGlzLnB1c2hRdWVyeShgXG4gICAgICBFWEVDVVRFIEJMT0NLIEFTIEJFR0lOXG4gICAgICBpZiAoZXhpc3RzKHNlbGVjdCAxIGZyb20gcmRiJHJlbGF0aW9ucyB3aGVyZSByZGIkcmVsYXRpb25fbmFtZSA9ICcke2Z1bGxUYWJsZU5hbWV9JykpIHRoZW5cbiAgICAgIGV4ZWN1dGUgc3RhdGVtZW50ICcke2Ryb3BUYWJsZVNxbH0nO1xuICAgICAgRU5EXG4gICAgYCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlbmFtZVRhYmxlKHRhYmxlTmFtZSwgdG8pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgJHt0aGlzLm5hbWV9IGlzIG5vdCBpbXBsZW1lbnRlZCBmb3IgdGhpcyBkaWFsZWN0IChodHRwOi8vd3d3LmZpcmViaXJkZmFxLm9yZy9mYXEzNjMvKS5gXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVmaXhlZFRhYmxlTmFtZShwcmVmaXgsIHRhYmxlKSB7XG4gIHJldHVybiBwcmVmaXggPyBgJHtwcmVmaXh9LiR7dGFibGV9YCA6IHRhYmxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBTY2hlbWFDb21waWxlcl9GaXJlYmlyZDtcbiJdfQ==