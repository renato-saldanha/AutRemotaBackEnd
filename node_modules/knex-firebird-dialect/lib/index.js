"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _construct2 = _interopRequireDefault(require("@babel/runtime/helpers/construct"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _lodash = require("lodash");

var _getStream = _interopRequireDefault(require("get-stream"));

var _assert = _interopRequireDefault(require("assert"));

var _client = _interopRequireDefault(require("knex/lib/client"));

var _columncompiler = _interopRequireDefault(require("./schema/columncompiler"));

var _compiler = _interopRequireDefault(require("./query/compiler"));

var _tablecompiler = _interopRequireDefault(require("./schema/tablecompiler"));

var _transaction = _interopRequireDefault(require("./transaction"));

var _compiler2 = _interopRequireDefault(require("./schema/compiler"));

var _formatter = _interopRequireDefault(require("./formatter"));

var _ddl = _interopRequireDefault(require("./schema/ddl"));

var _utils = require("./utils");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Client_Firebird = /*#__PURE__*/function (_Client) {
  (0, _inherits2["default"])(Client_Firebird, _Client);

  var _super = _createSuper(Client_Firebird);

  function Client_Firebird() {
    (0, _classCallCheck2["default"])(this, Client_Firebird);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(Client_Firebird, [{
    key: "_driver",
    value: function _driver() {
      return require("node-firebird");
    }
  }, {
    key: "schemaCompiler",
    value: function schemaCompiler() {
      return (0, _construct2["default"])(_compiler2["default"], [this].concat(Array.prototype.slice.call(arguments)));
    }
  }, {
    key: "queryCompiler",
    value: function queryCompiler(builder, formatter) {
      return new _compiler["default"](this, builder, formatter);
    }
  }, {
    key: "columnCompiler",
    value: function columnCompiler() {
      return (0, _construct2["default"])(_columncompiler["default"], [this].concat(Array.prototype.slice.call(arguments)));
    }
  }, {
    key: "tableCompiler",
    value: function tableCompiler() {
      return (0, _construct2["default"])(_tablecompiler["default"], [this].concat(Array.prototype.slice.call(arguments)));
    }
  }, {
    key: "transaction",
    value: function transaction() {
      return (0, _construct2["default"])(_transaction["default"], [this].concat(Array.prototype.slice.call(arguments)));
    }
  }, {
    key: "wrapIdentifierImpl",
    value: function wrapIdentifierImpl(value) {
      if (value === "*") {
        return value;
      }

      return value;
    } // Get a raw connection from the database, returning a promise with the connection object.

  }, {
    key: "acquireRawConnection",
    value: function acquireRawConnection() {
      var _this = this;

      (0, _assert["default"])(!this._connectionForTransactions);
      var driverConnectFn = this.config.createDatabaseIfNotExists ? this.driver.attachOrCreate : this.driver.attach;
      return new Promise(function (resolve, reject) {
        driverConnectFn(_this.connectionSettings, function (error, connection) {
          if (error) {
            return reject(error);
          }

          resolve(connection);
        });
      });
    } // Used to explicitly close a connection, called internally by the pool when
    // a connection times out or the pool is shutdown.

  }, {
    key: "destroyRawConnection",
    value: function () {
      var _destroyRawConnection = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(connection) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", new Promise(function (resolve, reject) {
                  connection.connection._socket.once("close", function () {
                    resolve();
                  });

                  connection.detach(function (err) {
                    if (err) {
                      reject(err);
                    }

                    connection.connection._socket.destroy();
                  });
                }));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function destroyRawConnection(_x) {
        return _destroyRawConnection.apply(this, arguments);
      }

      return destroyRawConnection;
    }() // Runs the query on the specified connection, providing the bindings and any
    // other necessary prep work.

  }, {
    key: "_query",
    value: function _query(connection, obj) {
      if (!obj || typeof obj === "string") {
        obj = {
          sql: obj
        };
      }

      return new Promise(function (resolver, rejecter) {
        if (!connection) {
          return rejecter(new Error("Error calling ".concat(obj.method, " on connection.")));
        }

        var _obj = obj,
            sql = _obj.sql;

        if (!sql) {
          return resolver();
        }

        var c = connection._trasaction || connection;
        c.query(sql, obj.bindings, function (error, rows, fields) {
          if (error) {
            return rejecter(error);
          }

          obj.response = [rows, fields];
          resolver(obj);
        });
      });
    }
  }, {
    key: "_stream",
    value: function _stream() {
      throw new Error("_stream not implemented"); // const client = this;
      // return new Promise(function (resolver, rejecter) {
      //   stream.on('error', rejecter);
      //   stream.on('end', resolver);
      //   return client
      //     ._query(connection, sql)
      //     .then((obj) => obj.response)
      //     .then((rows) => rows.forEach((row) => stream.write(row)))
      //     .catch(function (err) {
      //       stream.emit('error', err);
      //     })
      //     .then(function () {
      //       stream.end();
      //     });
      // });
    } // Ensures the response is returned in the same format as other clients.

  }, {
    key: "processResponse",
    value: function () {
      var _processResponse = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(obj, runner) {
        var response, method, _response, rows, fields;

        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (obj) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return");

              case 2:
                response = obj.response, method = obj.method;

                if (!obj.output) {
                  _context2.next = 5;
                  break;
                }

                return _context2.abrupt("return", obj.output.call(runner, response));

              case 5:
                _response = (0, _slicedToArray2["default"])(response, 2), rows = _response[0], fields = _response[1];
                _context2.next = 8;
                return this._fixBlobCallbacks(rows, fields);

              case 8:
                _context2.t0 = method;
                _context2.next = _context2.t0 === "first" ? 11 : _context2.t0 === "pluck" ? 12 : 13;
                break;

              case 11:
                return _context2.abrupt("return", rows[0]);

              case 12:
                return _context2.abrupt("return", (0, _lodash.map)(rows, obj.pluck));

              case 13:
                return _context2.abrupt("return", rows);

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function processResponse(_x2, _x3) {
        return _processResponse.apply(this, arguments);
      }

      return processResponse;
    }()
    /**
     * The Firebird library returns BLOBs with callback function, convert to buffer
     * @param {*} rows
     * @param {*} fields
     */

  }, {
    key: "_fixBlobCallbacks",
    value: function () {
      var _fixBlobCallbacks2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(rows
      /* fields */
      ) {
        var blobEntries;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (rows) {
                  _context3.next = 2;
                  break;
                }

                return _context3.abrupt("return", rows);

              case 2:
                blobEntries = [];
                (0, _utils.toArrayFromPrimitive)(rows).forEach(function (row, rowIndex) {
                  Object.entries(row).forEach(function (_ref) {
                    var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
                        colKey = _ref2[0],
                        colVal = _ref2[1];

                    if (colVal instanceof Function) {
                      blobEntries.push(new Promise(function (resolve) {
                        colVal(function (err, name, emitter) {
                          _getStream["default"].buffer(emitter).then(function (buffer) {
                            rows[rowIndex][colKey] = buffer;
                            resolve();
                          });
                        });
                      }));
                    } else if (colVal instanceof Buffer) {
                      rows[rowIndex][colKey] = colVal.toString("utf8");
                    }
                  });
                });
                _context3.next = 6;
                return Promise.all(blobEntries);

              case 6:
                return _context3.abrupt("return", rows);

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function _fixBlobCallbacks(_x4) {
        return _fixBlobCallbacks2.apply(this, arguments);
      }

      return _fixBlobCallbacks;
    }()
  }, {
    key: "validateConnection",
    value: function validateConnection(db) {
      var _db$connection = db.connection,
          _isClosed = _db$connection._isClosed,
          _isDetach = _db$connection._isDetach,
          _socket = _db$connection._socket,
          _isOpened = _db$connection._isOpened;

      if (_isClosed || _isDetach || !_socket || !_isOpened) {
        return false;
      }

      return true;
    }
  }, {
    key: "poolDefaults",
    value: function poolDefaults() {
      var options = {
        min: 2,
        max: 4
      };
      return (0, _lodash.defaults)(options, (0, _get2["default"])((0, _getPrototypeOf2["default"])(Client_Firebird.prototype), "poolDefaults", this).call(this, this));
    }
  }, {
    key: "ping",
    value: function ping(resource, callback) {
      resource.query("select 1 from RDB$DATABASE", callback);
    }
  }, {
    key: "ddl",
    value: function ddl(compiler, pragma, connection) {
      return new _ddl["default"](this, compiler, pragma, connection);
    }
  }]);
  return Client_Firebird;
}(_client["default"]);

Object.assign(Client_Firebird.prototype, {
  dialect: "firebird",
  driverName: "node-firebird",
  Firebird_Formatter: _formatter["default"]
});
var _default = Client_Firebird;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,